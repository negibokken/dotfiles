# language
export LANG=ja_JP.UTF-8

# mybin
export PATH=$PATH:$HOME/.mybin

# rbenv
export PATH=$HOME/.rbenv/shims:$PATH

# golang
export PATH=$PATH:/usr/local/opt/go/libexec/bin
export GOROOT=/usr/local/opt/go/libexec
export GOPATH=$HOME/go
export PATH=$PATH:$HOME/go/bin:$PATH:$GOROOT/bin:$HOME/.go/bin
export MYGO=$GOPATH/src/github.com/negibokken

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/shims:$PATH"

# nodebrew
export PATH=$PATH:./node_modules/.bin
export PATH=$HOME/.nodebrew/current/bin:$PATH
export PATH=$PATH:$HOME/.config/yarn/global/node_modules/.bin

# sbin
export PATH="/usr/local/sbin:$PATH"

# vscode plantuml
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home
export PLANTUML_JAR=/usr/local/Cellar/plantuml/8048/libexec/plantuml.jar
export GRAPHVIZ_DOT=/usr/local/Cellar/graphviz/2.40.1/bin/dot

# Hub
function git(){hub "$@"}

# history
HISTFILE=~/.zsh_history
HISTSIZE=1000
SAVEHIST=1000

# colorize
autoload -Uz colors
colors

autoload -Uz compinit
compinit

# complement file name
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# prompt
PROMPT="%{${fg[red]}%}[%n@%m]%{${reset_color}%} %~
%# "

# word cursor movement
bindkey '^f' forward-word
bindkey '^b' backward-word

# word definition
autoload -Uz select-word-style
select-word-style default
zstyle ':zle:*' word-chars " /=;@:{},|"
zstyle ':zle:*' word-style unspecified

# vcs prompt
autoload -Uz vcs_info
autoload -Uz add-zsh-hook
setopt prompt_subst
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' disable bzr svn hg
zstyle ':vcs_info:*' formats '%F{green}(%s)-[%b]%f'
zstyle ':vcs_info:*' actionformats '%F{red}(%s)-[%b|%a]%f'

function _update_vcs_info_msg() {
  LANG=en_US.UTF-8 vcs_info
  RPROMPT="${vcs_info_msg_0_}"
}
add-zsh-hook precmd _update_vcs_info_msg

# Options
## print_eight_bit
setopt print_eight_bit

## comment
setopt interactive_comments

## cd if specfied only directory
setopt auto_cd

## share history among zsh process
# setopt share_history

## delete same command
setopt hist_ignore_all_dups

## expand wild card
setopt extended_glob

## delete redundant spaces
setopt hist_reduce_blanks

# aliases
alias ls="ls -G"
alias l="ls -lt"
alias la="ls -lta"

alias vi="vim"

alias grep="grep --color"
alias egrep="egrep --color"
alias rm="rm -rf"

alias cp="cp -i"

alias mkdir="mkdir -p"

alias sudo="sudo "
alias gcp="gcloud"
alias kube="kubectl"

# tmux
tmux has-session >/dev/null 2>&1 && if [ -z "${TMUX}" ]; then
  echo '% tmux list-sessions'
  tmux list-sessions
  echo '% tmux list-windows -a'
  tmux list-windows -a
fi
if [[ ! $TMUX ]] ; then
  tmux new-session
fi

# make temp directory
mkdev () {
  if [ ! -n "$1" ]; then
    echo "Usage: mkdev dir-name"
  return
  fi
  local dirName=$1
  local rootDir=$(ghq root)
  local githubUser="github.com/$(git config user.name)"
  if [[ dirName = */* ]]; then
    githubUser = "github.com"
  fi
  local devPath="${rootDir}/${githubUser}/${dirName}"
  mkdir -p ${devPath}
  cd ${devPath}
}

mktemp () {
  if [ ! -n "$1" ]; then
    echo "Usage: mktemp dir-name"
    return
  fi
  local dirName=$1
  local rootDir="$HOME/temp"
  local devPath="${rootDir}/${dirName}"
  mkdir -p ${devPath}
  cd ${devPath}
}


gotemp () {
  if [ ! -n "$1" ]; then
    echo "Usage: gotemp dir-name"
    return
  fi
  local dirName=$1
  local rootDir="$HOME/go/src/github.com/negibokken"
  local devPath="${rootDir}/${dirName}"
  mkdir -p ${devPath}
  cd ${devPath}
}

###############################
# peco
###############################
function peco-select-history() {
  BUFFER=$(\history -n -r 1 | peco --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history

# search a destination from cdr list
function peco-get-destination-from-cdr() {
  cdr -l | \
  sed -e 's/^[[:digit:]]*[[:blank:]]*//' | \
  peco --query "$LBUFFER"
}

function peco-cdr() {
  local destination="$(peco-get-destination-from-cdr)"
  if [ -n "$destination" ]; then
    BUFFER="cd $destination"
    zle accept-line
  else
    zle reset-prompt
  fi
}
zle -N peco-cdr
bindkey '^x' peco-cdr

## peco
alias gh='cd $(ghq list -p | peco)'
alias pro='cd ~/Project/$(ls ~/Project | peco)'
alias temp='cd ~/temp/$(ls ~/temp | peco)'
alias cb='git checkout `git branch |
  peco |
  sed -e "s/\* //g" |
  awk "{print \$1}"`'

#peco„Åßkill
function peco-pkill() {
  for pid in `ps aux | peco | awk '{ print $2 }'`
  do
    kill $pid
    echo "Killed ${pid}"
  done
}
alias pk="peco-pkill"

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f /Users/bokken/go/src/github.com/negibokken/serverless-test/node_modules/tabtab/.completions/serverless.zsh ]] && . /Users/bokken/go/src/github.com/negibokken/serverless-test/node_modules/tabtab/.completions/serverless.zsh
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f /Users/bokken/go/src/github.com/negibokken/serverless-test/node_modules/tabtab/.completions/sls.zsh ]] && . /Users/bokken/go/src/github.com/negibokken/serverless-test/node_modules/tabtab/.completions/sls.zsh

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/bokken/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/bokken/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/bokken/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/bokken/google-cloud-sdk/completion.zsh.inc'; fi
